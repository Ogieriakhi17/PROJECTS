<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetEngine</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetEngine.ExpressionTree">
            <summary>
            Expression Tree class for Spreadsheet engine.
            </summary>
        </member>
        <member name="F:SpreadsheetEngine.ExpressionTree.variables">
            <summary>
            Dictionary for variables.
            </summary>
        </member>
        <member name="F:SpreadsheetEngine.ExpressionTree.expressionStack">
            <summary>
            Stack to hold the expressions during compilation.
            </summary>
        </member>
        <member name="F:SpreadsheetEngine.ExpressionTree.variableStack">
            <summary>
            Stack to hold the variables.
            </summary>
        </member>
        <member name="F:SpreadsheetEngine.ExpressionTree.root">
            <summary>
            root field.
            </summary>
        </member>
        <member name="F:SpreadsheetEngine.ExpressionTree.expression">
            <summary>
            Expression to be evaluated.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpreadsheetEngine.ExpressionTree"/> class.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:SpreadsheetEngine.ExpressionTree.Expression">
            <summary>
            Gets or sets accessor for the private field "expression".
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.SetVariable(System.String,System.Double)">
            <summary>
            Method to set include variable values in the Variable Dictionary.
            </summary>
            <param name="variableName"></param>
            <param name="variableValue"></param>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.Evaluate">
            <summary>
            Helper function for the evaluate method.
            </summary>
            <returns>evaluated double.</returns>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.Evaluate(SpreadsheetEngine.TreeNode)">
            <summary>
            Evaluate method for tree.
            </summary>
            <param name="node"></param>
            <returns>The evaluated result of the expression.</returns>
            <exception cref="T:System.NotSupportedException"> If the op is not supported.</exception>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.CompilePostExpression">
            <summary>
            Compiles and returns the PostFixExpression to a Tree.
            </summary>
            <returns>Node.</returns>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.ConvertPostExpression">
            <summary>
            changes the post expression so that pop would be grabbing the first element instead of last.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.UpdatedCompile(System.String)">
            <summary>
            changes the post expression so that pop would be grabbing the first element instead of last.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.IsOperatorSupported(System.String)">
            <summary>
            To check and see if an op is supported.
            </summary>
            <param name="op"></param>
            <returns>bool.</returns>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.PopAndPush">
            <summary>
            Pops and pushes values until a '(' is found.
            Used when a ')' is found.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.CheckParenthesis(System.String)">
            <summary>
            Checks if string is a parenthesis.
            </summary>
            <param name="word">String.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:SpreadsheetEngine.ExpressionTree.PopForLeft(SpreadsheetEngine.OperatorNode)">
            <summary>
            Continues to pop from varStck until the precedence is greater than or equal to the one being added.
            Every node popped will be added to the result of PostFixExpression expressionStack.
            </summary>
            <param name="temp">OperatorNode.</param>
        </member>
        <member name="T:SpreadsheetEngine.ExpTreeNodeFactory">
            <summary>
            Factory class to produce specialized cells.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.ExpTreeNodeFactory.CreateOperatorNode(System.Nullable{System.Char})">
            <summary>
            Method defined to produce Operator node based on character passed in.
            </summary>
            <param name="op"></param>
            <returns>OperatorNode.</returns>
            <exception cref="T:System.NotSupportedException">.</exception>
        </member>
        <member name="M:SpreadsheetEngine.ExpTreeNodeFactory.CreateVariableOrConstantNode(System.String)">
            <summary>
            Method to create variable and constant nodes.
            </summary>
            <param name="value"></param>
            <returns>TreeNode.</returns>
        </member>
        <member name="T:SpreadsheetEngine.MultiplicationNode">
            <summary>
            Class for the mulitplication class.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.MultiplicationNode.#ctor">
            <inheritdoc />
        </member>
        <member name="M:SpreadsheetEngine.MultiplicationNode.DoOperation(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Operation function for multiplication operation nodes.
            </summary>
            <param name="variables"></param>
            <returns> double. </returns>
        </member>
        <member name="T:SpreadsheetEngine.OperatorNode">
            <summary>
            Operator Node method.
            </summary>
        </member>
        <member name="P:SpreadsheetEngine.OperatorNode.Operator">
            <summary>
            Gets or sets Operator.
            </summary>
        </member>
        <member name="P:SpreadsheetEngine.OperatorNode.Left">
            <summary>
            Gets or sets Left Node.
            </summary>
        </member>
        <member name="P:SpreadsheetEngine.OperatorNode.Right">
            <summary>
            Gets or sets Right node.
            </summary>
        </member>
        <member name="T:SpreadsheetEngine.SubtractionNode">
            <summary>
            Subraction class inheriting from the Operator Node.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.SubtractionNode.#ctor">
            <inheritdoc />
        </member>
        <member name="M:SpreadsheetEngine.SubtractionNode.DoOperation(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Operation method being overloaded for the subtraction class.
            </summary>
            <param name="variables"></param>
            <returns>double.</returns>
        </member>
        <member name="T:SpreadsheetEngine.TreeNode">
            <summary>
            Node class for building th e expressoino tree.
            </summary>
        </member>
        <member name="M:SpreadsheetEngine.TreeNode.Evaluate">
            <summary>
            Evaluate class for all nodes that inherit from Treenode.
            </summary>
        </member>
        <member name="T:SpreadsheetEngine.VariableNode">
            <summary>
            Variable Node class.
            </summary>
        </member>
        <member name="P:SpreadsheetEngine.VariableNode.Name">
            <summary>
            Gets or sets name of the variable.
            </summary>
        </member>
    </members>
</doc>
